// use crate::{inst_match};
use super::{OpCode::*, FlatRiscV, *};


//////////////////////////////
/// impl

pub fn flat_disasm(src: &[u8], is_32bit: bool) -> Option<(FlatRiscV, usize)> {
  if is_32bit {
    inst_match_packet!(src,
      b"0000000??????????001_?????_0010011", itype -> iop.sll;
      b"0000000??????????101_?????_0010011", itype -> iop.srl;
      b"0100000??????????101_?????_0010011", itype -> iop.sra;
    );
  } else {
    inst_match_packet!(src,
      b"000000???????????001_?????_0010011", itype -> iop.sll;
      b"000000???????????101_?????_0010011", itype -> iop.srl;
      b"010000???????????101_?????_0010011", itype -> iop.sra;
    );
  }
  inst_match_packet!(src,
    b"????????????????????_?????_0110111", utype -> lui;
    b"????????????????????_?????_0010111", utype -> auipc;
    b"????????????????????_?????_1101111", jtype -> jal;
    b"?????????????????000_?????_1100111", itype -> jalr;
    b"?????????????????000_?????_1100011", btype -> br.eq;
    b"?????????????????001_?????_1100011", btype -> br.ne;
    b"?????????????????100_?????_1100011", btype -> br.lt;
    b"?????????????????101_?????_1100011", btype -> br.ge;
    b"?????????????????110_?????_1100011", btype -> br.ltu;
    b"?????????????????111_?????_1100011", btype -> br.geu;
    b"?????????????????000_?????_0000011", itype -> load.b;
    b"?????????????????001_?????_0000011", itype -> load.h;
    b"?????????????????010_?????_0000011", itype -> load.w;
    b"?????????????????011_?????_0000011", itype -> load.d;
    b"?????????????????100_?????_0000011", itype -> load.bu;
    b"?????????????????101_?????_0000011", itype -> load.hu;
    b"?????????????????110_?????_0000011", itype -> load.wu;
    b"?????????????????000_?????_0100011", stype -> store.b;
    b"?????????????????001_?????_0100011", stype -> store.h;
    b"?????????????????010_?????_0100011", stype -> store.w;
    b"?????????????????011_?????_0000011", itype -> store.d;
    b"?????????????????000_?????_0010011", itype -> iop.add;
    b"?????????????????010_?????_0010011", itype -> iop.slt;
    b"?????????????????011_?????_0010011", itype -> iop.sltu;
    b"?????????????????100_?????_0010011", itype -> iop.xor;
    b"?????????????????110_?????_0010011", itype -> iop.or;
    b"?????????????????111_?????_0010011", itype -> iop.and;
    b"?????????????????000_?????_0011011", itype -> iop.addw;
    b"000000???????????001_?????_0011011", itype -> iop.sllw;
    b"000000???????????101_?????_0011011", itype -> iop.srlw;
    b"010000???????????101_?????_0011011", itype -> iop.sraw;
    b"0000000??????????000_?????_0110011", rtype -> op.add;
    b"0100000??????????000_?????_0110011", rtype -> op.sub;
    b"0000000??????????001_?????_0110011", rtype -> op.sll;
    b"0000000??????????010_?????_0110011", rtype -> op.slt;
    b"0000000??????????011_?????_0110011", rtype -> op.sltu;
    b"0000000??????????100_?????_0110011", rtype -> op.xor;
    b"0000000??????????101_?????_0110011", rtype -> op.srl;
    b"0100000??????????101_?????_0110011", rtype -> op.sra;
    b"0000000??????????110_?????_0110011", rtype -> op.or;
    b"0000000??????????111_?????_0110011", rtype -> op.and;
    b"0000000??????????000_?????_0111011", rtype -> op.addw;
    b"0100000??????????000_?????_0111011", rtype -> op.subw;
    b"0000000??????????001_?????_0111011", rtype -> op.sllw;
    b"0000000??????????101_?????_0111011", rtype -> op.srlw;
    b"0100000??????????101_?????_0111011", rtype -> op.sraw;
    b"0000????????00000000_00000_0001111", itype -> fence;
    b"00000000000000000001_00000_0001111", itype -> fence.i;
    b"00000000000000000000_00000_1110011", itype -> excep.call;
    b"00000000000100000000_00000_1110011", itype -> excep.ret;
    b"?????????????????001_?????_1110011", itype -> csr.rw;
    b"?????????????????010_?????_1110011", itype -> csr.rs;
    b"?????????????????011_?????_1110011", itype -> csr.rc;
    b"?????????????????101_?????_1110011", itype -> csr.rwi;
    b"?????????????????110_?????_1110011", itype -> csr.rsi;
    b"?????????????????111_?????_1110011", itype -> csr.rci;
  );
  None
}


mod test {
  #[test]
  fn test1() {
    use super::flat_disasm;
    let src = 0b11111111111111111111_00000_0110111_u32.to_le_bytes();
    let _r = flat_disasm(&src, false).unwrap();
    // println!("out: {:?}", r);
  }
}